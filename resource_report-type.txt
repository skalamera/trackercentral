INSTRUCTIONS TO ADD THE RESOURCE AND REPORT TYPE FIELDS TO THE FORMATTED SUBJECT LINE

PURPOSE: This document provides instructions for implementing dynamic subject line updates in SIM tracker templates to ensure Resource and Report Type values are preserved regardless of field entry order.

## Subject Line Formatting Rules for Resource and Report Type

### Format Structure
The subject line should follow this specific format:
```
[VIP*] [District Name] | SIM Assignment | [Resource] | [Report Type]
```

### Specific Formatting Rules:

#### 1. **Resource Field**
- Should appear after "SIM Assignment" 
- Preceded by a pipe separator with spaces: ` | `
- Use the exact value from the dropdown (no modifications)

Example:
```
District ABC | SIM Assignment | Benchmark Advance
```

#### 2. **Report Type Field**
- Should appear after Resource (if Resource exists)
- Should appear after "SIM Assignment" (if no Resource selected)
- Also preceded by a pipe separator with spaces: ` | `
- Use the exact value from the dropdown

Examples:
```
// With both Resource and Report Type:
District ABC | SIM Assignment | Benchmark Advance | Unit Assessment Reports

// With only Report Type (no Resource selected):
District ABC | SIM Assignment | Assessment Reports
```

#### 3. **Order Independence**
The key requirement is that these values should appear in the subject line based on their logical position, NOT based on the order they were entered:

```javascript
// Correct implementation ensures consistent ordering:
let subjectParts = [];

// 1. VIP prefix (if applicable)
if (isVip) {
    subjectParts.push('VIP*');
}

// 2. District name
if (district) {
    subjectParts.push(district);
}

// 3. Separator before template name
if (subjectParts.length > 0) {
    subjectParts.push('|');
}

// 4. Template name (always present)
subjectParts.push('SIM Assignment');

// 5. Resource (if selected)
if (resource) {
    subjectParts.push(`| ${resource}`);
}

// 6. Report Type (if selected)
if (reportType) {
    subjectParts.push(`| ${reportType}`);
}

// Join with spaces
subjectField.value = subjectParts.join(' ');
```

### Examples of Correct Subject Lines:

1. **All fields populated:**
   ```
   VIP* District XYZ | SIM Assignment | Benchmark Advance | Unit Assessment Reports
   ```

2. **No VIP status:**
   ```
   District XYZ | SIM Assignment | Benchmark Advance | Unit Assessment Reports
   ```

3. **Only Resource selected:**
   ```
   District XYZ | SIM Assignment | Benchmark Advance
   ```

4. **Only Report Type selected:**
   ```
   District XYZ | SIM Assignment | Assessment Reports
   ```

5. **Neither Resource nor Report Type:**
   ```
   District XYZ | SIM Assignment
   ```

### Important Notes:

1. **Separator Format**: Always use ` | ` (space-pipe-space) between sections
2. **No Double Separators**: Don't add separators if the field is empty
3. **Preserve User Selection**: Use the exact text from the dropdown options
4. **Fixed Order**: Always maintain the order shown above, regardless of which field the user fills first

This ensures consistency across all tickets and makes them easily searchable and sortable in the ticketing system.


## Summary of Changes for Dynamic Subject Line Updates

### Problem Statement
The SIM Assignment tracker had an issue where Resource and Report Type values would disappear from the subject line depending on the order in which fields were filled out. The subject needed to dynamically update as users entered information in any order.

### Key Changes Made

#### 1. **Added Real-time Event Listeners for All Relevant Fields**

Instead of only updating the subject when certain fields changed, we added event listeners to ALL fields that contribute to the subject line:

```javascript
// Fields that trigger subject updates
const fieldsToWatch = [
    'districtDropdown',
    'resourceDropdown', 
    'reportTypeDropdown',
    'vipCheckbox'
];

// Add change event listeners to all fields
fieldsToWatch.forEach(fieldId => {
    const element = document.getElementById(fieldId);
    if (element) {
        element.addEventListener('change', updateSubject);
    }
});
```

#### 2. **Created a Centralized Subject Update Function**

We consolidated all subject formatting logic into a single `updateSubject()` function that:
- Gathers current values from all relevant fields
- Builds the subject line based on what's currently selected
- Updates the subject field in real-time

```javascript
function updateSubject() {
    const districtDropdown = document.getElementById('districtDropdown');
    const resourceDropdown = document.getElementById('resourceDropdown');
    const reportTypeDropdown = document.getElementById('reportTypeDropdown');
    const vipCheckbox = document.getElementById('vipCheckbox');
    const subjectField = document.getElementById('subject');
    
    if (!subjectField) return;
    
    // Get current values
    const district = districtDropdown?.value || '';
    const resource = resourceDropdown?.value || '';
    const reportType = reportTypeDropdown?.value || '';
    const isVip = vipCheckbox?.checked || false;
    
    // Build subject parts
    let subjectParts = [];
    
    // Add VIP prefix if checked
    if (isVip) {
        subjectParts.push('VIP*');
    }
    
    // Add district
    if (district) {
        subjectParts.push(district);
    }
    
    // Add separator before template name
    if (subjectParts.length > 0) {
        subjectParts.push('|');
    }
    
    // Add template name
    subjectParts.push('SIM Assignment');
    
    // Add resource if selected
    if (resource) {
        subjectParts.push(`| ${resource}`);
    }
    
    // Add report type if selected
    if (reportType) {
        subjectParts.push(`| ${reportType}`);
    }
    
    // Join all parts and update subject
    subjectField.value = subjectParts.join(' ');
}
```

#### 3. **Removed Conflicting Subject Updates**

We identified and removed code that was overwriting the subject line at inappropriate times:

**Before (Problematic Code):**
```javascript
// This was overwriting the subject when district changed
districtDropdown.addEventListener('change', function() {
    const selectedDistrict = this.value;
    if (selectedDistrict) {
        // This would erase Resource and Report Type!
        subjectField.value = `${selectedDistrict} | SIM Assignment`;
    }
});
```

**After (Fixed Code):**
```javascript
// Now calls the centralized update function
districtDropdown.addEventListener('change', updateSubject);
```

#### 4. **Ensured Subject Updates on All State Changes**

The subject now updates whenever:
- District is selected/changed
- Resource is selected/changed  
- Report Type is selected/changed
- VIP checkbox is toggled
- Form is loaded with pre-filled data
- Draft is loaded

#### 5. **Maintained Subject State During Form Validation**

We ensured that validation and form submission don't reset or clear the carefully constructed subject line:

```javascript
// During form submission
const finalSubject = document.getElementById('subject').value;
// Preserve the complete subject with all components
```

### Implementation Guidelines for Other SIM Templates

When applying this pattern to other SIM tracker templates:

1. **Identify all fields that contribute to the subject line**
   - District (always)
   - VIP status (always)
   - Template-specific fields (varies by template)

2. **Create a centralized `updateSubject()` function**
   - Follow the same pattern of building subject parts
   - Maintain consistent formatting: `[VIP*] District | Template Name | Field1 | Field2`

3. **Add event listeners to all contributing fields**
   - Use 'change' events for dropdowns and checkboxes
   - Consider 'input' events for text fields if needed

4. **Remove any isolated subject updates**
   - Search for any code that directly sets `subject.value = ...`
   - Replace with calls to `updateSubject()`

5. **Test all possible field entry orders**
   - Fill fields in different sequences
   - Ensure subject maintains all entered values
   - Verify VIP prefix appears/disappears correctly

### Example Template Structure

For other SIM templates, follow this structure:

```javascript
// Template: SIM [TemplateName]
function updateSubject() {
    // Get all field values
    const district = document.getElementById('districtDropdown')?.value || '';
    const field1 = document.getElementById('field1Dropdown')?.value || '';
    const field2 = document.getElementById('field2Dropdown')?.value || '';
    const isVip = document.getElementById('vipCheckbox')?.checked || false;
    
    // Build subject
    let subjectParts = [];
    if (isVip) subjectParts.push('VIP*');
    if (district) subjectParts.push(district);
    if (subjectParts.length > 0) subjectParts.push('|');
    subjectParts.push('SIM [TemplateName]');
    if (field1) subjectParts.push(`| ${field1}`);
    if (field2) subjectParts.push(`| ${field2}`);
    
    // Update subject field
    document.getElementById('subject').value = subjectParts.join(' ');
}

// Add listeners during initialization
['districtDropdown', 'field1Dropdown', 'field2Dropdown', 'vipCheckbox'].forEach(id => {
    const element = document.getElementById(id);
    if (element) element.addEventListener('change', updateSubject);
});
```

## Quick Implementation Checklist
- [ ] Create centralized updateSubject() function
- [ ] Add event listeners to all contributing fields
- [ ] Remove any direct subject.value assignments
- [ ] Test all field entry combinations
- [ ] Verify VIP prefix behavior
- [ ] Confirm subject format matches examples

This approach ensures a consistent, reliable subject line that preserves all user selections regardless of entry order.